<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>io.github.kanedafromparis.shyrka</groupId>
    <artifactId>gcvp</artifactId>
    <version>0.0.9</version>
    <packaging>jar</packaging>
    <scm>
        <connection>scm:git:git://github.com/kanedafromparisfriends/gcvp.git</connection>
        <developerConnection>scm:git:git@github.com:kanedafromparisfriends/gcvp.git</developerConnection>
        <url>https://github.com/kanedafromparisfriends/gcvp.git</url>
        <tag>HEAD</tag>
    </scm>
    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/kanedafromparisfriends/gcvp/issues/</url>
    </issueManagement>
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <java.version>1.8</java.version>        
        <!-- docker.maven.plugin.version>0.23.0</docker.maven.plugin.version -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <exec.mainClass>io.github.kanedafromparis.shyrka.gcvp.GCVP</exec.mainClass>
        <podName>mypod</podName>
        <!-- <masterUrl>https://localhost:8443/</masterUrl> -->
        <namespace>shyrka</namespace>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.8.0-beta1</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>1.8.0-beta1</version>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <version>2.4.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model</artifactId>
            <version>5.7.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-client</artifactId>
            <version>5.7.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>openshift-client</artifactId>
            <version>5.7.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-assertions</artifactId>
            <version>4.0.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>2.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-server-mock</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>          
            <exclusions>
                <exclusion>
                    <groupId>com.sun</groupId>
                    <artifactId>tools</artifactId>                    
                </exclusion>
            </exclusions>            
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>openshift-server-mock</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.4</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-email</artifactId>
            <version>1.5</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.11.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>4.4</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
            <version>4.1.2</version>
            <type>jar</type>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <!-- http://www.jsonschema2pojo.org/ 
            @todo use it correctly
            <plugin>
                <groupId>org.jsonschema2pojo</groupId>
                <artifactId>jsonschema2pojo-maven-plugin</artifactId>
                <version>1.0.0-alpha2</version>
                <configuration>
                    <sourceDirectory>${basedir}/src/main/resources/schema</sourceDirectory>
                    <outputDirectory>${basedir}/src/main/java</outputDirectory>
                    <targetPackage>io.github.kanedafromparis.shyrka.projectchecker.model</targetPackage>
                    
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>${exec.mainClass}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.2.0</version>
                
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <ignoredDependencies />
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.37.0</version>
                <extensions>true</extensions>
                <configuration>
                    <resources>
                        <labels> 
                            <!-- @Todo clarify the label stg -->
                            <all> 
                                <property> 
                                    <name>artifactId</name>
                                    <value>${project.artifactId}</value>
                                </property>
                                <property> 
                                    <name>version</name>
                                    <value>${project.version}</value>
                                </property>
                            </all>
                        </labels>

                        <annotations>          
                        </annotations>
                    </resources>
                    <!--machine>
                        <name>${project.artifactId}</name>
                        <autoCreate>true</autoCreate>
                        <createOptions>
                            <driver>virtualbox</driver>
                            <virtualbox-cpu-count>2</virtualbox-cpu-count>
                        </createOptions>
                    </machine-->
                    <images>
                        <image>                            
                            <name>kanedafromparis/${project.artifactId}:${project.version}</name>
                            <build> 
                                <from>adoptopenjdk/openjdk10:x86_64-alpine-201807101745-slim</from>
                                <assembly>
                                    <mode>dir</mode>
                                    <targetDir>/opt/${project.artifactId}</targetDir>
                                    <descriptor>../assembly/docker-assembly.xml</descriptor>
                                </assembly>
                                <maintainer />
                                <workdir>/opt/${project.artifactId}</workdir>
                                <env>
                                    <JVM_OPTIONS>-Djava.security.egd=file:/dev/./urandom 
                                        -XX:+UnlockExperimentalVMOptions 
                                        -XX:+UseCGroupMemoryLimitForHeap 
                                        -XX:MaxRAMFraction=2 -XshowSettings:vm
                                    </JVM_OPTIONS>                                    
                                </env>
                                <labels>
                                    <io.github.kanedafromparisfriends-label-status>gcvp</io.github.kanedafromparisfriends-label-status>
                                    <version>${project.version}</version>
                                    <artifactId>${project.artifactId}</artifactId>
                                </labels>
                                <entryPoint>
                                    <shell>java $JVM_OPTIONS \
                                        -cp .:lib \
                                        -Djava.util.logging.config.file=./conf/logging.properties \
                                        -jar /opt/${project.artifactId}/${project.artifactId}-${project.version}.jar \
                                        -ephyra
                                    </shell>                                    
                                </entryPoint>
                                
                            </build>
                          
                            <!-- there is no run since it should work has a cron job -->
                            <run />
                        </image>
                    </images>
                </configuration>                
            </plugin>
            <plugin>
                <groupId>org.eclipse.jkube</groupId>
                <artifactId>kubernetes-maven-plugin</artifactId>
                <version>1.4.0</version>
                <executions>
                    <execution>
                        <id>fmp</id>
                        <goals>
                            <goal>resource</goal>
                            <goal>helm</goal>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <isJib>true</isJib>
                    <resources>
                        <labels> 
                            <!-- @Todo clarify the label stg -->
                            <all> 
                                <property> 
                                    <name>artifactId</name>
                                    <value>${project.artifactId}</value>
                                </property>
                                <property> 
                                    <name>version</name>
                                    <value>${project.version}</value>
                                </property>
                            </all>
                        </labels>

                        <annotations>          
                        </annotations>
                    </resources>
                    <!--machine>
                        <name>${project.artifactId}</name>
                        <autoCreate>true</autoCreate>
                        <createOptions>
                            <driver>virtualbox</driver>
                            <virtualbox-cpu-count>2</virtualbox-cpu-count>
                        </createOptions>
                    </machine-->
                    <images>
                        <image>                            
                            <name>kanedafromparis/${project.artifactId}:${project.version}</name>
                            <build> 
                                
                                <!-- from>openjdk:8-jre-alpine3.7</from-->
                                <from>openjdk:10.0.1-jre-slim</from>
 
                                <assembly>
                                    <mode>dir</mode>
                                    <targetDir>/opt/${project.artifactId}</targetDir>
                                    <!-- name>kanedafromparis/${project.artifactId}:${project.version}</name -->
                                    <inline>
                                        <id>docker</id>
                                        <fileSets>
                                            <fileSet>
                                                <directory>${basedir}/${project.build.directory}/lib</directory>
                                                <includes>
                                                    <include>*.jar</include>
                                                </includes>
                                                <outputDirectory>lib</outputDirectory>
                                            </fileSet>
                                            <fileSet>
                                                <directory>${basedir}/${project.build.directory}</directory>
                                                <includes>
                                                    <include>${project.artifactId}-${project.version}.jar</include>
                                                </includes>
                                                <outputDirectory>.</outputDirectory>
                                                <!--<excludes>
                                                    <exclude>README.txt</exclude>
                                                    <exclude>NOTICE.txt</exclude>
                                                </excludes>-->
                                            </fileSet>
                                            <fileSet>
                                                <directory>${basedir}/src/main/conf/</directory>
                                                <includes>
                                                    <include>*.json</include> 
                                                    <include>*.yaml</include> 
                                                    <include>*.properties</include>                
                                                </includes>
                                                <outputDirectory>conf</outputDirectory>
                                                <!--<excludes>
                                                    <exclude>README.txt</exclude>
                                                    <exclude>NOTICE.txt</exclude>
                                                </excludes>-->
                                            </fileSet>        
                                        </fileSets>
                                    </inline>
                                </assembly>
                                
                                <maintainer />
                                <workdir>/opt/${project.artifactId}</workdir>
                                <env>
                                    <JVM_OPTIONS>-Djava.security.egd=file:/dev/./urandom 
                                        -XX:+UnlockExperimentalVMOptions 
                                        -XX:+UseCGroupMemoryLimitForHeap 
                                        -XX:MaxRAMFraction=2 
                                        -XshowSettings:vm
                                    </JVM_OPTIONS>                                    
                                </env>
                                <labels>
                                    <io.github.kanedafromparisfriends-label-status>gcvp</io.github.kanedafromparisfriends-label-status>
                                    <version>${project.version}</version>
                                    <artifactId>${project.artifactId}</artifactId>
                                </labels>
                                <entryPoint>
                                    <shell>java $JVM_OPTIONS \
                                        -cp .:lib \
                                        -Djava.util.logging.config.file=./conf/logging.properties \
                                        -jar /opt/${project.artifactId}/${project.artifactId}-${project.version}.jar</shell>                                    
                                </entryPoint>
                                
                            </build>
                          
                            <!-- there is no run since it should work has a cron job -->
                            <run />
                        </image>
                    </images>
                    <enricher>
                        <config>
                            <!-- vertx-health-check>
                                <path>/healthz</path>                                
                            </vertx-health-check -->
                            <fmp-revision-history>
                                <limit>8</limit>
                            </fmp-revision-history>
                        </config>
                    </enricher>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.owasp</groupId>
                <artifactId>dependency-check-maven</artifactId>
                <version>6.2.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration><failOnError>false</failOnError></configuration>
            </plugin>
        </plugins>
    </build>
</project>